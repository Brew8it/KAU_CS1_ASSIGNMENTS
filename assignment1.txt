----------------------Assignments from lecture 1 crypto----------------------
1 What is the adversary’s goal and capabilities in IND-CPA?
	*The goal is to prove that an symmetric encryption algorithm is unsecure via a game.
	if an symmetric encryption algorithm is 50/50 the algorithm is deamd to be secure since
	the adversary is only guessing at that point.
	*The capabillities the adversary has is an "encryption oracle" meaning that it can
	send how many messages it wants and get back the cyphertext and compute it as much it
	wants.
2 What is the difference between an IV and a nonce?
	*Nonce a number only used once.
	*IV(initialization vector): has to be an random stream of bytes as the same size as 
	the CBC block size. This vector also has to be unpredictable.
		Conversely, most block cipher modes of operation require an IV which is random 			and unpredictable, or at least unique for each message encrypted with a given 			key. (Of course, if each key is only ever used to encrypt a single message, 			one can get away with using a fixed IV.) This random IV ensures that each 			message encrypts differently, such that seeing multiple messages encrypted 			with the same key doesn't give the attacker any more information than just 			seeing a single long message. In particular, it ensures that encrypting the 			same message twice yields two completely different ciphertexts, which is 			necessary in order for the encryption scheme to be semantically secure.
	The difference is that a Nonce is a random number only used once and for a short time
	with the intention of beeing replaced by or converted into something better(e.g CTR)
	An IV is also used as input for an crypto primitive to achieve randomization to our 		first block in a CBC mode and therefor messages that is the same (m1=m2) will not
	encrypt to the same cipher.
	
3 What is the difference between a protocol and an algorithm?
	*algorithm: Is how we process some data to derive at an awnser.
	*protocol: Its like an algorithm but it invoves several players / entities
	that is communicating using primitives and / or schemes
		A protocol is a set of rules that governs how a system operates. The rules 			establish the basic functioning of the different parts, how they interact with 			each other, and what conditions are necessary for a healthy implementation. 			The different parts of a protocol are not sensitive to order or chronology – 			it doesn’t matter which part is enacted first. And a protocol doesn’t tell the 			system how to produce a result. It doesn’t have an objective other than a 			smooth execution. It doesn’t produce an output.

		It’s like the engine of a car, how a car works.

		An algorithm, on the other hand, is a set of instructions that produces an 			output or a result. It can be a simple script, or a complicated program. The 			order of the instructions is important, and the algorithm specifies what that 			order is. It tells the system what to do in order to achieve the desired 			result. It may not know what the result is beforehand, but it knows that it 			wants one.

		It’s what you need to do to drive the car, the actions that the driver 			performs.

		The protocol is a set of rules that determines how the system functions.

		The algorithm tells the system what to do.

		The protocol is. The algorithm does.
	
4 Describe the CBC and CTR block-cipher modes.
	*In CBC mode each block of plaintext is XOR'd with the previous ciphertext block 
	(if first block the IV is used) before beeing encrypted. To make sure that every
	message is unique an IV must be used on the first block. Since the block cipher
	encryption relys on the the previous block used the encryption process must be done in 		sequence and cannot be parallelized(downside/slow).
	One other important aspect is padding, when we try to break down a message into blocks
	what will happen if the last block is not even with the block size?
	message_block != block_size. We have to padd the last block so the block is fully 		filled. When padding we ussaly fill with ones or zeros. But when we decrypt how
	much do we need to unpad? One way in python is useing these lambda expressions:
	BLOCK_SIZE = 16  # Bytes
	pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \
                chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
	unpad = lambda s: s[:-ord(s[len(s) - 1:])]
	
	Decryption is almsot done in the same way but insted of XORing in the beginning.
	We XOR after we have decrypted the cipher text. We XOR with the previous ciphertext
	meaning that we can parallelize the decryption process and gain alot of speed.
	
	https://upload.wikimedia.org/wikipedia/commons/8/80/CBC_encryption.svg
	https://upload.wikimedia.org/wikipedia/commons/2/2a/CBC_decryption.svg


	*CTR mode(counter mode): Is a mode of operation that works by concatenating 
	a nonce with a block counter. The counter is incremented with each of the blocks and
	then padded with zeroes so that the whole string is as long as the block size. This
	resulting string is then run trough the block cioher. The output of the block zipher 		is the used XOR'd with the message block to produce the final encrypted block.
	To decrypt we just do the same thing on the reciver side except when we XOR, we 
	xOR with the ciphertext block. This is since XORing a bit with the same value twice
	will produce the original bit. pi ⊕ si ⊕ si = pi. What this means is that both
	encryption and decryption does the same thing. in both the cases you produce the
	encrypted block from the concatenated string and then you either XOR the plaintext
	or ciphertext block. This also means that this can be done in parallel.	
	
	https://upload.wikimedia.org/wikipedia/commons/4/4d/CTR_encryption_2.svg
	https://upload.wikimedia.org/wikipedia/commons/3/3c/CTR_decryption_2.svg
	
	PS: With hardware supprt CBC mode can be as fast if not faster then CTR mode. But
	this needs to be implemented in the hardware that most CPU manufactures today 		implements


5 For symmetric encryption with a block cipher using CBC-mode, what is the consequence of:
	*Using a predictable IV?: If we use a predictable IV we can use an so called:
	Chosen-Plaintext Attack. If we look at an easy game regarding this:
	If we pretend that our DBA at company X is an advesary. This company store medical 	   illnesses of its costumers as "yes/no" but these awnser are encrypted with CBC. Our 		DBA realizes that he can extort ppl with serten illnesses for money. 
	In CBC mode the IV is XOR'd with the plaintext, then run block encryption ciper giving 
	ecvation: C1 = Ek(IV ⊕ P1).
	
	Since our DBA can enter his own data into the database and get it encrypted when
	ever he likes and he can also predict what his IV(IVX) will be aswell as as his target
	Alices(IVa). Since he know this he can send his own message Px to get encrypted.
	Px = IVx ⊕ IVa ⊕ "false".
	The CBC will the encrypt our message like this:
	Cx = Ek(IVx ⊕ Px) = Ek(IVx ⊕ (Ivx ⊕ IVa ⊕ "false")).
	The IVx ⊕ Ivx will cancel out eachother wich means the ecvation will change to:
	Cx = Ek(IVa ⊕ "false")
	Now our adversary can simply compare the ourput he got with alices and see if they 		match(e.g false to that illness) or if they dont match alice has the illnes.

	*Reusing an IV?
	Problem is that same messages will encrypt to the same cipher text. 
	Specifically, assuming there's no padding, the vulnerability that occurs with using t	he same IV every time is that if you start out encrypting the same data you encrypted 		last time, you'll get the same encrypted string both times. This allows attackers to 		infer something about the message content, though it doesn't help them decrypt it.

	C1 = E(P1 ⊕ IVx)
	C2 = E(P2 ⊕ IVx)

	P3 = (P1 ⊕ IVx) ⊕ (P2 ⊕ IVx)
	C3 = E((P1 ⊕ IVx) ⊕ (P2 ⊕ IVx) ⊕ IVx)

	fråga tobisas!!

6 How is ROT13 related to the Caesar cipher? Give an example.
	Both are so called "simple" letter substitution cipher's that replaces a letter with 		the letter X steps forward. ROT13 is 13 step ahead of the original character. 
	Using a Cesar shift of 13 will yeld the same as the ROT13 cipher.
	Input 	ABCDEFGHIJKLM | NOPQRSTUVWXYZ | abcdefghijklm | nopqrstuvwxyz
	Output 	NOPQRSTUVWXYZ | ABCDEFGHIJKLM | nopqrstuvwxyz | abcdefghijklm

	Plaintext: Johannes is best
	Obscured:  Wbunaarf vf orfg

7 Assume that you compress a message m as part of encrypting it with a
semantically secure encryption algorithm: does this break semantic security? Explain why (not).
	It does not break the semanticly secured scheme since in case of BEAST attack they
	use that the compressing algorithm "leaks" information about a block becouse one
	optimasation compress algos has is that if a block that is beeing compress'd is the 		same as one before it does not compress it again it only gives a referens to the passt
	compress'd block. The way TLS has protected against this is using explicit IV's
	
	REF:https://crypto.stackexchange.com/questions/2641/why-do-new-versions-of-tls-use-an-explicit-iv-for-cbc-suites
	[CBCATT] describes a chosen plaintext attack on TLS that depends on knowing the IV for 		a record. Previous versions of TLS [TLS1.0] used the CBC residue of the previous 		record as the IV and therefore enabled this attack. This version uses an explicit IV 		in order to protect against this attack.

	http://www.ietf.org/rfc/rfc4346.txt
        http://www.openssl.org/~bodo/tls-cbc.txt.
	
8 Attempt to answer the question on slide 13.
	VETO
----------------------Assignments from lecture 2 crypto----------------------
1 For a cryptographic hash function, what is the difference between
second pre-image resistance and collision resistance?
	Collision resistance is about the infeasibility of finding two distinct inputs m and 		m' such that h(m) = h(m'). The attacker gets to choose m and m' arbitrarily, as long 		as he ends up with two distinct messages that hash to the same value.

	Second-preimage resistance is very similar except that the attacker does not get to 		choose m. Instead, we give him m, and challenge him with finding m' (distinct from m) 		such that h(m) = h(m').

	A second-preimage is also a collision, but we keep the concept distinct because 	second-	preimages are supposed to be substantially harder. If the hash function has an 		output of n bits and is "perfect" (no known weakness), then the cost of finding a 		collision is 2^(n/2), while the cost of finding a second-preimage is 2^n (i.e. a lot 		more).

	PS: if an hash function is collision resistant this also imples that the hash function
	is also Secound-preimage resistance. 
	

2 A cryptographic hash function has the output length of n bits. What is
its security (in bits), at best, in terms of collision resistance?
	When no known weakness the "cost" of finding a collision is 2^(n/2)

3 Calculate the probability of the birthday paradox for a room of 38
people.
	(1-i/365) aprox = e^(-i/365) = 0,9011 = 90,11%
	

4 A website stores its users’ passwords in a database by hashing them
with SHA-256. How long does it take for an attacker that has access to
the database to find all 7-character passwords? Make assumptions
about what are valid characters and what kind of PC the attacker has
(but the attacker is using hashcat).
	valid character = (A-Z,a-z,0-9)
	7 characters at 62 values per digit = 62^7 = 3,521614606×10¹²
	according to: https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40
	a GTX1080 makes: 2,876,000,000(2,876x10⁹) sha-256 attepmts per second using hashcat.
	3,521614606×10¹² / 2,876x10⁹ / 60 = 20.408 minutes using only 1 GPU.
	using 2 GPU's only yelds 7,3 minutes.
	


5 Alice and Bob share a secret key sk. Alice sends to Bob, over a network, a message
m and a tag t from a MAC over m using sk. How does Bob verify that the message hasn’t been tampered with?:
	Alice tag = at, bob tag = bt.
	Bob can run the message into the MAC algorithm and the "MAC/TAG" outputed is then 		compared. if they are the same(at = bt), the message has not been tamperd with.
	

6 You go to a website and download a file. The website lists the MD5,
SHA1, and SHA256 hashes of the file for verification purposes. How
useful is this for security? Motivate your answer.

7 A website offers a feature to “recover your password” if you forget it.
You use the feature and the website sends you your password to your
email. What does this imply? Is it good or bad? Motivate your answer.

8 Explain the logic behind the “correct horse battery staple” comic.










